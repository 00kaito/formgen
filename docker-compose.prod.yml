version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-formbuilder}
      POSTGRES_USER: ${POSTGRES_USER:-formbuilder_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-formbuilder_password123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-formbuilder_user} -d ${POSTGRES_DB:-formbuilder}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - formbuilder_network

  # Form Builder Application
  app:
    build: .
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: ${APP_PORT:-5000}
      DATABASE_URL: postgres://${POSTGRES_USER:-formbuilder_user}:${POSTGRES_PASSWORD:-formbuilder_password123}@postgres:5432/${POSTGRES_DB:-formbuilder}
      SESSION_SECRET: ${SESSION_SECRET:-your_secure_session_secret_change_this_in_production}
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${POSTGRES_DB:-formbuilder}
      PGUSER: ${POSTGRES_USER:-formbuilder_user}
      PGPASSWORD: ${POSTGRES_PASSWORD:-formbuilder_password123}
    ports:
      - "${APP_PORT:-5000}:5000"
    volumes:
      - app_uploads:/app/uploads
      - app_backups:/app/form-backups
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:5000/api/auth/user').then(() => process.exit(0)).catch(() => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - formbuilder_network

volumes:
  postgres_data:
  app_uploads:
  app_backups:

networks:
  formbuilder_network:
    driver: bridge